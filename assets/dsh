#!/bin/bash

# `set +e` is used to continue on errors throughout this script.
set -euo pipefail

# Project is used as the prefix for docker networking, container naming and nginx hostname.
# Source the .env file here, the project var is required asap.
if [ -f .env ]; then
  source .env
fi
export PROJECT=${PROJECT:-$(basename "${PWD}" | tr -d '.')}
export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-${PROJECT}}

# Work out some other values we need.
HOST_TYPE=$(uname | tr '[:upper:]' '[:lower:]')
DOCKER_COMPOSE_FILE="docker-compose.${HOST_TYPE}.yml"

# Set domain default if its not set.
set +u
if [ -z "${DOMAIN}" ]; then
  if [[ "${HOST_TYPE}" =~ 'darwin' ]]; then
    DOMAIN="127.0.0.1.xip.io"
  else
    DOMAIN="172.17.0.1.xip.io"
  fi
fi
set -u

# Ultimately permit overriding repo docker-compose.yml with custom file.
if [ -f docker-compose.yml ]; then
  DOCKER_COMPOSE_FILE='docker-compose.yml'
fi

# Set user variables
USER_ID=$(id -u)
GROUP_ID=$(id -g)

# Setup some functions to output warnings.
notice()  { printf "\e[32;01m%s\e[39;49;00m\n" "$1"; }
warning() { printf "\e[33;01m%s\e[39;49;00m\n" "$1"; }
error()   { printf "\e[31;01m%s\e[39;49;00m\n" "$1"; }

# Ensure script is NOT running inside a container - must be run from host.
if [ -f /.dockerenv ]; then
  error "Inception error - you can't run $0 within a docker container."
  exit
fi

# Add functionality to the dsh setup/start function
setup_nginx() {
  # Check if its running/exists already and start if required.
  if docker ps -a --format "{{.Names}}" | grep nginx-proxy > /dev/null; then
    docker start nginx-proxy > /dev/null
  else
    warning "Starting nginx proxy"
    docker run -d -p 8080:80  \
      -v /var/run/docker.sock:/tmp/docker.sock:ro \
      --restart always --name nginx-proxy \
      jwilder/nginx-proxy:latest
  fi

  if ! docker ps --format "{{.Names}}" --filter "name=^nginx-proxy$" > /dev/null; then
    error "jwilder/nginx-proxy could not be started."
  fi

  set +e
  URL="http://${PROJECT}.${DOMAIN}:8080"
  NGINX_IP=$(docker inspect --format "{{with index .NetworkSettings.Networks \"${PROJECT}_default\"}}{{.IPAddress}}{{end}}" nginx-proxy)
  if [[ ! ${NGINX_IP} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    notice "Connecting nginx-proxy to the network."
    docker network connect "${PROJECT}_default" nginx-proxy
  fi
  set -e
}

# Add functionality to the dsh stop function
stop_nginx() {
  if docker network ls --format "{{.Name}}" --filter "name=^${PROJECT}_default\$" > /dev/null; then
    notice "Disconnecting nginx proxy from network."
    set +e
    docker network disconnect "${PROJECT}_default" nginx-proxy > /dev/null
    set -e
  fi
}

# Command: ./dsh start
# Configures environment then brings up project using docker-compose.yml file.
dsh_start() {
  if [[ ! $(docker ps --format "{{.Names}}" --filter "name=^${PROJECT}_web") =~ "${PROJECT}_web" ]]; then
    notice "Starting containers."
    # Too slow to leave in # docker-compose -f ${DOCKER_COMPOSE_FILE} build --parallel
    if [[ ! $(docker network ls --format "{{.Name}}" --filter "name=^${PROJECT}_default\$") =~ "${PROJECT}_default" ]]; then
      notice "Creating network."
      docker network create "${PROJECT}_default"
    fi
    setup_nginx

    docker-compose -f ${DOCKER_COMPOSE_FILE} up -d
    URL="http://${PROJECT}.${DOMAIN}:8080"
    notice "Please wait about 10 seconds for the database to settle.

The project is now available at: ${URL}.

Files are available in /code, You may need to 'robo build' to install."
  fi
}

# Command: ./dsh shell
# Connects a shell to the web image as the current user.
dsh_shell() {
  dsh_start

  docker-compose -f ${DOCKER_COMPOSE_FILE} exec \
   -e COLUMNS="$(tput cols)" \
   -e LINES="$(tput lines)" \
   web "${@:-./dsh_bash}"
}

# Command: ./dsh stop
# Stops project and brings down network after disconnecting nginx proxy.
dsh_stop() {
  notice "Stopping containers."
  stop_nginx
  docker-compose -f ${DOCKER_COMPOSE_FILE} stop
}

# Command: ./dsh down
# Stops project, then takes down containers and removes volumes if possible.
dsh_down() {
  stop_nginx
  notice "Removing containers."
  docker-compose -f ${DOCKER_COMPOSE_FILE} down -v
}

# Command: ./dsh purge
# Stops project, then takes down containers, removes volumes and remove dev image.
dsh_purge() {
  dsh_down
  docker rmi -f singularo/s2i-shepherd-drupal-dev
}

# Command: ./dsh status
# Shows status information about project containers.
dsh_status() {
  docker-compose -f ${DOCKER_COMPOSE_FILE} ps
}

# Command: ./dsh logs
# Tails logs from web container.
dsh_logs() {
  docker-compose -f ${DOCKER_COMPOSE_FILE} logs -f web
}

dsh_project() {
  set +e
  if [ -f dsh.project ]; then
    source dsh.project
  fi
  set -e
}

# Command: ./dsh pull
# Fetches all images used by the project.
dsh_pull() {
  # docker-compose doesn't resolve sub-dependencies in Dockerfiles.
  docker pull singularo/s2i-shepherd-drupal
  docker-compose -f ${DOCKER_COMPOSE_FILE} pull --ignore-pull-failures
  docker-compose -f ${DOCKER_COMPOSE_FILE} build
}

# Command: ./dsh nfs
# Sets up NFS integration for OSX.
NFS_FILE=/etc/exports
NFS_LINE="/Users -alldirs -mapall=${USER_ID}:${GROUP_ID} localhost"
dsh_setup_nfs() {
  if [ "$(uname)" != "Darwin" ]; then
    notice "This script is OSX-only. Please do not run it on any other Unix."
    exit 1
  fi

  if [[ ${EUID} -eq 0 ]]; then
    notice "This script must NOT be run with sudo/root. Please re-run without sudo." 1>&2
    exit 1
  fi

  notice " +-----------------------------+"
  notice " | Setup native NFS for Docker |"
  notice " +-----------------------------+"

  warning "WARNING: This script will shut down running containers."
  warning -n "Do you wish to proceed? [y]: "
  read -r DECISION

  if [ "${DECISION}" != "y" ]; then
    warning "Exiting. No changes made."
    exit 1
  fi

  if ! docker ps > /dev/null 2>&1 ; then
    notice "== Waiting for docker to start..."
  fi

  open -a Docker

  while ! docker ps > /dev/null 2>&1 ; do sleep 2; done

  notice "== Stopping running docker containers..."
  set +e
  docker-compose -f ${DOCKER_COMPOSE_FILE} down > /dev/null 2>&1
  docker volume prune -f > /dev/null
  set -e

  osascript -e 'quit app "Docker"'

  notice "== Resetting folder permissions..."
  sudo chown -R "${USER_ID}:${GROUP_ID}" .

  notice "== Setting up nfs..."
  sudo cp /dev/null "${NFS_FILE}"
  grep -qF -- "${NFS_LINE}" "${NFS_FILE}" || sudo echo "${NFS_LINE}" | sudo tee -a "${NFS_FILE}" > /dev/null

  LINE="nfs.server.mount.require_resv_port = 0"
  FILE=/etc/nfs.conf
  grep -qF -- "${LINE}" "${FILE}" || sudo echo "${LINE}" | sudo tee -a "${FILE}" > /dev/null

  notice "== Restarting nfsd..."
  sudo nfsd restart

  notice "== Restarting docker..."
  open -a Docker

  while ! docker ps > /dev/null 2>&1 ; do sleep 2; done

  notice "SUCCESS! Now go run your containers 🐳"
}

# Command: ./dsh rnfs
# Removes nfs setup.
dsh_remove_nfs() {
  if [ "$(uname)" != "Darwin" ]; then
    notice "This script is OSX-only. Please do not run it on any other Unix."
    exit 1
  fi

  if [[ ${EUID} -eq 0 ]]; then
    notice "This script must NOT be run with sudo/root. Please re-run without sudo." 1>&2
    exit 1
  fi

  notice "== Removing nfsd exports..."
  sudo sed -i '' "/$(echo "${NFS_LINE}" | sed 's/\//\\\//g')/d" ${NFS_FILE}
  warning "== Restarting nfsd..."
  sudo nfsd restart
  warning "== Done"
}

dsh_help() {
  printf "\nUsage: dsh COMMAND\n
Commands:
\t down\tShutdown and destroy the containers.
\t exec\tExecute a command in the container.
\t help\tShow this help.
\t logs\tShow the container logs with tail -f - ctrl-c to exit.
\t pull\tPull the latest container images.
\t purge\tPurge the docker containers, network and proxy and remove all data.
\t shell\tStart a shell which is connected to the containers and can be used to run commands.
\t start\tStart the docker containers, network and proxy.
\t status\tShow the status of this projects containers.
\t stop\tStop the docker containers, network and proxy, but keep data for a re-start.
Mac specific setup:
\t nfs\tSetup NFS for macOS.
\t rnfs\tRemove NFS for macOS.
\nIf no command is given, shell is the default.
Commands can be shortened to their unique component, eg ./dsh sh is the same as ./dsh shell.\n\n"
}

# Set a default command to show usage when no arguments provided.
COMMAND=${1:-default}

case ${COMMAND} in
  dow*)
    dsh_down
    ;;
  e*)
    dsh_shell "${@:2}"
    ;;
  h*|-h|--help)
    dsh_help
    ;;
  l*)
    dsh_logs
    ;;
  nfs)
    dsh_setup_nfs
    ;;
  pul*)
    dsh_pull
    ;;
  pur*)
    dsh_purge
    ;;
  rnfs)
    dsh_remove_nfs
    ;;
  sh*|ss*)
    dsh_shell "${@:2}"
    ;;
  star*)
    dsh_start
    ;;
  stat*)
    dsh_status
    ;;
  sto*)
    dsh_stop
    ;;
  *)
    warning "Starting shell. For other options try $0 help."
    dsh_shell
    ;;
esac
