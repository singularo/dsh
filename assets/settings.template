/**
 * START SHEPHERD CONFIG
 */
// Allow using an sqlite db for testing etc.
if (getenv('SQLITE_DATABASE')) {
  $databases['default']['default'] = [
    'driver' => 'sqlite',
    'database' => getenv('SQLITE_DATABASE'),
  ];
}
else {
  $databases['default']['default'] = array (
    'database' => getenv('DATABASE_NAME') ?: 'drupal',
    'username' => getenv('DATABASE_USER') ?: 'user',
    'password' => getenv('DATABASE_PASSWORD_FILE') ? file_get_contents(getenv('DATABASE_PASSWORD_FILE')) : getenv('DATABASE_PASSWORD'),
    'host' => getenv('DATABASE_HOST') ?: 'db',
    'port' => getenv('DATABASE_PORT') ?: '3306',
    'driver' => getenv('DATABASE_DRIVER') ?: 'mysql',
    'prefix' => getenv('DATABASE_PREFIX') ?: '',
    'collation' => getenv('DATABASE_COLLATION') ?: 'utf8mb4_general_ci',
    'namespace' => getenv('DATABASE_NAMESPACE') ?: 'Drupal\\Core\\Database\\Driver\\mysql',
  );
}
$settings['file_private_path'] = getenv('PRIVATE_DIR') ?: '/shared/private';
$settings['file_temp_path'] = getenv('TMP_DIR') ?: '/shared/tmp';
$settings['hash_salt'] = getenv('HASH_SALT') ?: '{{ HASH_SALT }}';

// Retrieve config sync dir from env variable.
if ($config_sync_dir = getenv('CONFIG_SYNC_DIR')) {
  $settings['config_sync_directory'] = $config_sync_dir;
}
else {
  // Support using the shared filesystem for config for immutable containers.
  if (is_dir('/shared/config-sync')) {
    $settings['config_sync_directory'] = '/shared/config-sync';
  }
  // Fallback to storing config in the older style.
  else {
    $settings['config_sync_directory'] = DRUPAL_ROOT . '/../config-sync';
  }
}
$settings['shepherd_site_id'] = getenv('SHEPHERD_SITE_ID');
$settings['shepherd_url'] = getenv('SHEPHERD_URL');
$settings['shepherd_token'] = getenv('SHEPHERD_TOKEN_FILE') ? file_get_contents(getenv('SHEPHERD_TOKEN_FILE')) : getenv('SHEPHERD_TOKEN');

if (getenv('REDIS_ENABLED')) {
  $settings['redis.connection']['interface'] = 'PhpRedis';
  $settings['redis.connection']['host'] = getenv('REDIS_HOST') ?: '127.0.0.1';
  // Always set the fast backend for bootstrap, discover and config, otherwise
  // this gets lost when redis is enabled.
  $settings['cache']['bins']['bootstrap'] = 'cache.backend.chainedfast';
  $settings['cache']['bins']['discovery'] = 'cache.backend.chainedfast';
  $settings['cache']['bins']['config'] = 'cache.backend.chainedfast';

  $settings['cache_prefix']['default'] = getenv('REDIS_PREFIX') ?: '';
  // If we're not installing, include the redis services.
  if (!isset($GLOBALS['install_state'])) {
    $settings['cache']['default'] = 'cache.backend.redis';
    $settings['container_yamls'][] = 'modules/contrib/redis/example.services.yml';
  }
  if (getenv('REDIS_PASSWORD_FILE') || getenv('REDIS_PASSWORD')) {
    $settings['redis.connection']['password'] = getenv('REDIS_PASSWORD_FILE') ? file_get_contents(getenv('REDIS_PASSWORD_FILE')) : getenv('REDIS_PASSWORD');
  }
}
if (getenv('MEMCACHE_ENABLED')) {
  $memcache_host = getenv('MEMCACHE_HOST') ?: '127.0.0.1';
  $memcache_port = getenv('MEMCACHE_PORT') ?: '11211';
  $settings['memcache']['servers'] = [$memcache_host . ':' . $memcache_port => 'default'];
  $settings['memcache']['bins'] = ['default' => 'default'];
  $settings['memcache']['key_prefix'] = getenv('MEMCACHE_PREFIX') ?: '';
  // If we're not installing, include the memcache services.
  if (!isset($GLOBALS['install_state'])) {
    $settings['cache']['default'] = 'cache.backend.memcache';
  }
}
if (getenv('SHEPHERD_SECRET_PATH')) {
  $settings['shepherd_secrets'] = [];
  // Glob the secret path for shepherd secrets.
  foreach (glob(rtrim(getenv('SHEPHERD_SECRET_PATH'), '/') . '/SHEPHERD_*', 0) as $secret) {
    $settings['shepherd_secrets'][pathinfo($secret, PATHINFO_FILENAME)] = file_get_contents($secret);
  }
}
if (getenv('SHEPHERD_REVERSE_PROXY')) {
  $settings['reverse_proxy'] = TRUE;

  // To calculate trusted headers, check in /admin/reports/status/php for HTTP_X_* vars.
  // drush php
  // > use Symfony\Component\HttpFoundation\Request;
  // > echo Request::HEADER_X_FORWARDED_PROTO | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_FOR;
  // 26
  //
  // Default is 30 - which is FORWARDED_FOR | FORWARDED_PORT | FORWARDED_PROTO | FORWARDED_HOST;
  $settings['reverse_proxy_trusted_headers'] = getenv('SHEPHERD_REVERSE_PROXY_TRUSTED') ?: 30;

  // Set the possible addresses for the reverse proxy.
  $settings['reverse_proxy_addresses'] = explode(',', getenv('SHEPHERD_REVERSE_PROXY_ADDRESSES')) ?: [];
  if (getenv('HTTP_X_FORWARDED_PROTO') === 'https') {
    $_SERVER['HTTPS'] = 'on';
  }
}
if (getenv('TRUSTED_HOST_PATTERNS')) {
  $settings['trusted_host_patterns'] = explode(',', getenv('TRUSTED_HOST_PATTERNS')) ?: [];
}
/**
 * END SHEPHERD CONFIG
 */

/**
 * START APP CONFIG
 *
 * A settings file with settings and configuration specific to this app/website.
 */
if (file_exists(__DIR__ . '/settings.app.php')) {
  include __DIR__ . '/settings.app.php';
}
/**
 * END APP CONFIG
 */

/**
 * ALLOW PER ENVIRONMENT CONFIG
 */
if ($environment = getenv('SHEPHERD_ENVIRONMENT')) {
  $environment_settings = $app_root . '/' . $site_path . '/settings.' . $environment . '.php';
  if (file_exists($environment_settings)) {
    include($environment_settings);
  }
}
/**
 * END PER ENVIRONMENT CONFIG
 */
